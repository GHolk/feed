<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[卡斯伯 Blog - 前端，沒有極限]]></title>
        <description><![CDATA[前端工程師，有關 CSS、javascript]]></description>
        <link>http://wcc723.github.io/</link>
        <image>
            <url>http://wcc723.github.io/images/casper_blog.svg</url>
            <title>卡斯伯 Blog - 前端，沒有極限</title>
            <link>http://wcc723.github.io/</link>
        </image>
        <generator>anafeed: power by npm/RSS, npm/JSDOM, node.js</generator>
        <lastBuildDate>Fri, 09 Oct 2020 16:28:01 GMT</lastBuildDate>
        <atom:link href="http://gholk.github.io/feed/wcc723.rss" rel="self" type="application/rss+xml"/>
        <pubDate>Sat, 20 Oct 2018 00:00:00 GMT</pubDate>
        <language><![CDATA[zh-TW]]></language>
        <managingEditor><![CDATA[卡斯伯 casper wcc723]]></managingEditor>
        <webMaster><![CDATA[gholk]]></webMaster>
        <docs>http://gholk.github.io/feed/</docs>
        <ttl>1440</ttl>
        <category><![CDATA[front-end]]></category>
        <category><![CDATA[javascript]]></category>
        <category><![CDATA[css]]></category>
        <category><![CDATA[html]]></category>
        <item>
            <title><![CDATA[
        怎樣也不會失手的 Bootstrap 格線運用技巧
        ]]></title>
            <description><![CDATA[
            


.box {
  height: 100px;
  background-color: #69F0AE;
}
.form-row>.col, .form-row>[class*=col-] {
  padding-right: 5px;
  padding-left: 5px;
}
.form-row {
  display: -ms-flexbox;
  display: flex;
  
        ]]></description>
            <link>https://wcc723.github.io/development/2020/10/09/bootstrap-grid/</link>
            <guid isPermaLink="true">https://wcc723.github.io/development/2020/10/09/bootstrap-grid/</guid>
            <category><![CDATA[
            development
            ]]></category>
            <pubDate>Thu, 08 Oct 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2Firon2020_24.jpg?alt=media&amp;token=eff1db4b-9fc3-4683-9e84-7794b0c8a58a" length="0" type="image"/>
        </item>
        <item>
            <title><![CDATA[
        手把手自訂你的 Bootstrap 樣式
        ]]></title>
            <description><![CDATA[
            Bootstrap 在第四版以後在介紹文檔，說明自己是一個函式庫而不是框架。樣式的框架代表載入後都是基於此架構開發，無論是否喜歡特定的內容，都需要先全盤接受後再自行調整；而函式庫代表你可以選用自己喜歡的部份，並且調整成合適的樣式，相對於框架來說有更高的彈性。
本篇將會依據 Bootstrap 文檔及實戰的經驗，與大家分享開發中常用的客製化技巧，讓大家可以輕鬆的客製 Bootstrap 樣式。
對於
        ]]></description>
            <link>https://wcc723.github.io/development/2020/10/08/custom-bootstrap-style/</link>
            <guid isPermaLink="true">https://wcc723.github.io/development/2020/10/08/custom-bootstrap-style/</guid>
            <category><![CDATA[
            development
            ]]></category>
            <pubDate>Wed, 07 Oct 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2Firon2020_23.jpg?alt=media&amp;token=57512023-4c18-42df-a2b6-e1521dc8caa8" length="0" type="image"/>
        </item>
        <item>
            <title><![CDATA[
        JS - for 迴圈與 forEach 有什麼不同
        ]]></title>
            <description><![CDATA[
            過去，當有一個陣列的內容需要依序取值時，都會使用 for... 迴圈(for loop)的形式將值一一取出，原始碼的結構如下：12345var array = ['小明', '杰倫', '漂亮阿姨', '小美']for (var i = 0; i < array.length; i++) {  cons
        ]]></description>
            <link>https://wcc723.github.io/development/2020/10/05/js-for-loop-vs-for-each/</link>
            <guid isPermaLink="true">https://wcc723.github.io/development/2020/10/05/js-for-loop-vs-for-each/</guid>
            <category><![CDATA[
            development
            ]]></category>
            <pubDate>Sun, 04 Oct 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2Firon2020_20.jpg?alt=media&amp;token=fac330e3-b516-421d-b072-1ed4f70cab8a" length="0" type="image"/>
        </item>
        <item>
            <title><![CDATA[
        JS 常見陣列方法 [push(), unshift(), pop(), shift(), splice(), reverse(), concat(), include(), indexOf(), join()]
        ]]></title>
            <description><![CDATA[
            本篇陣列方法是延伸過去寫的 JavaScript 陣列處理方法，目前的框架主流觀念都是「關注點分離」，框架主要都是負責畫面上的渲染；資料面完全交由給原生的 JS 處理，因此，對於資料處理的語法就需要有更高的掌握度。
熟悉陣列的方法，自然對於處理資料上會更得心應手，而先前的「陣列處理方法」是著重在迴圈的運用，而本篇則是介紹其餘常用的部分，本篇所會介紹的方法包含：

push()
unshift()

        ]]></description>
            <link>https://wcc723.github.io/development/2020/10/04/js-array-methods/</link>
            <guid isPermaLink="true">https://wcc723.github.io/development/2020/10/04/js-array-methods/</guid>
            <category><![CDATA[
            development
            ]]></category>
            <pubDate>Sat, 03 Oct 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2Firon2020_19.jpg?alt=media&amp;token=8d6a40c4-0b89-4e5c-b7cd-d512cc400264" length="0" type="image"/>
        </item>
        <item>
            <title><![CDATA[
        AJAX 完整解說系列：輕鬆搞懂 HTTP 狀態碼（HTTP Status Code）
        ]]></title>
            <description><![CDATA[
            AJAX 是前端與後端的介接，當跨越不同的環境時，所有的狀態會越來越難預期，接著就可能會發生錯誤，造成的錯誤狀態可能會如下：

流程與設計不同
資料格式不符合
連線失敗、網路不穩定
程式碼上的錯誤（這就不是本章節要討論的）

錯誤在開發的過程中是非常常見的，只不過我們在開發的過程中容易「忽視錯誤」僅以「最完美個過程」進行開發，這樣的結果會導致使用者不知道正遭遇在錯誤的狀態中而苦苦等待，所以錯誤一定
        ]]></description>
            <link>https://wcc723.github.io/development/2020/10/03/about-ajax-4/</link>
            <guid isPermaLink="true">https://wcc723.github.io/development/2020/10/03/about-ajax-4/</guid>
            <category><![CDATA[
            development
            ]]></category>
            <pubDate>Fri, 02 Oct 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2Firon2020_18.jpg?alt=media&amp;token=ddebf02c-7873-436b-b737-04722e0981fc" length="0" type="image"/>
        </item>
        <item>
            <title><![CDATA[
        AJAX 完整解說系列：使用 Chrome Devtools 檢視請求及回應
        ]]></title>
            <description><![CDATA[
            從上一篇內容我們介紹到 AJAX 都是由瀏覽器發出請求，伺服器則會依據請求的內容進行回應。所以在這之中的 “請求”、“回應” 都會夾帶著不同資源，供瀏覽器及伺服器進行辨識及運用，所以此篇就針對瀏覽器與伺服器溝通的內容進行說明，帶大家更深入的認識 AJAX。


發出請求到回應的過程示意圖

注意：本篇以 “成功” 的請求為主，失敗不在本篇的介紹重點。
所有的資訊都在 Chrome Network本
        ]]></description>
            <link>https://wcc723.github.io/development/2020/10/02/about-ajax-3/</link>
            <guid isPermaLink="true">https://wcc723.github.io/development/2020/10/02/about-ajax-3/</guid>
            <category><![CDATA[
            development
            ]]></category>
            <pubDate>Thu, 01 Oct 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2Firon2020_17.jpg?alt=media&amp;token=453d818d-ab2d-40ca-abca-d3c150a692d9" length="0" type="image"/>
        </item>
        <item>
            <title><![CDATA[
        AJAX 完整解說系列：新增、更新、刪除（POST/PATCH/DELETE）
        ]]></title>
            <description><![CDATA[
            AJAX 除了 GET 以外，其它幾個常見的請求方法通常都會對資料庫進行操作，尤其是 POST、PUT、PATCH 在發出請求的同時還會有附加資源傳送至伺服器。

雖然相對於 GET 來說僅是多增加了 “資料”，但這個步驟卻讓許多新進的開發者困擾不已，可能是對於 JSON 結構不熟悉、或是對於 API 文件不清楚，這都可能造成請求的失敗，所以本篇帶大家從文件開始到發送，完整說明一次帶有資料的請求是
        ]]></description>
            <link>https://wcc723.github.io/development/2020/10/01/about-ajax-2/</link>
            <guid isPermaLink="true">https://wcc723.github.io/development/2020/10/01/about-ajax-2/</guid>
            <category><![CDATA[
            development
            ]]></category>
            <pubDate>Wed, 30 Sep 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2Firon2020_16.jpg?alt=media&amp;token=d434496f-5624-4784-8b8f-f3dbb1b5f3de" length="0" type="image"/>
        </item>
        <item>
            <title><![CDATA[
        AJAX 完整解說系列：基礎觀念
        ]]></title>
            <description><![CDATA[
            AJAX 全名是「Asynchronous JavaScript and XML」，在網頁上的功能主要是用於網頁前端與後端伺服器溝通的技術，也如同名稱一樣是透過 JavaScript 的非同步技術，在前端工程師中算是一個挑戰門檻，如果沒有此技能則難與不同領域開發者溝通，也因此在前端求職市場中趨近於基本必備技能。
相對於其它觀念來說，AJAX 因為需要與後端伺服器介接，許多開發者因為沒有此資源，也找
        ]]></description>
            <link>https://wcc723.github.io/development/2020/09/30/about-ajax/</link>
            <guid isPermaLink="true">https://wcc723.github.io/development/2020/09/30/about-ajax/</guid>
            <category><![CDATA[
            development
            ]]></category>
            <pubDate>Tue, 29 Sep 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2Firon2020_15.jpg?alt=media&amp;token=a02b7412-0768-436f-980f-31baf786a23a" length="0" type="image"/>
        </item>
        <item>
            <title><![CDATA[
        箭頭函式常見陷阱題
        ]]></title>
            <description><![CDATA[
            JavaScript ES6 以後加入了 ”箭頭函式“，就外觀看來它就像是一個縮寫，也因此許多新手會認為它是屬於傳統函式的縮寫形式；但其實不然，箭頭函式與傳統函式大不同，本篇僅列出最常見的 this 差異，並透過大量的範例題，並透過範例的方式讓新手避免踩到箭頭函式最常見的雷。
傳統函式的 this 問題JS 中很常利用物件、方法的形式來建構組件，在物件中的方法也可透過 this 來取得物件中的其它
        ]]></description>
            <link>https://wcc723.github.io/development/2020/09/29/arrow-homework/</link>
            <guid isPermaLink="true">https://wcc723.github.io/development/2020/09/29/arrow-homework/</guid>
            <category><![CDATA[
            development
            ]]></category>
            <pubDate>Mon, 28 Sep 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2Firon2020_14.jpg?alt=media&amp;token=ba6d6297-030d-4495-a510-459963174ca1" length="0" type="image"/>
        </item>
        <item>
            <title><![CDATA[
        透過練習題，摸熟 This 的運作
        ]]></title>
            <description><![CDATA[
            JavaScript 的 this 會隨著調用的方式不同影響其指向的不同（ES6 的箭頭函式定義也會影響指向），網路上已經提供相當多的資源介紹 this 指向的觀念，本篇只著重在最常運用的物件方法調用做介紹，並且透過練習題的方式，帶大家一步一步認識 this 的指向。
關於「物件方法調用」可以查看本文章：https://wcc723.github.io/javascript/2019/03/18/
        ]]></description>
            <link>https://wcc723.github.io/development/2020/09/28/this-homework/</link>
            <guid isPermaLink="true">https://wcc723.github.io/development/2020/09/28/this-homework/</guid>
            <category><![CDATA[
            development
            ]]></category>
            <pubDate>Sun, 27 Sep 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2Firon2020_13.jpg?alt=media&amp;token=604172f5-9369-4dda-838b-98004eac855f" length="0" type="image"/>
        </item>
    </channel>
</rss>