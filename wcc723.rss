<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[卡斯伯 Blog - 前端，沒有極限]]></title>
        <description><![CDATA[前端工程師，有關 CSS、javascript]]></description>
        <link>http://wcc723.github.io/</link>
        <image>
            <url>http://wcc723.github.io/images/casper_blog.svg</url>
            <title>卡斯伯 Blog - 前端，沒有極限</title>
            <link>http://wcc723.github.io/</link>
        </image>
        <generator>anafeed: power by npm/RSS, npm/JSDOM, node.js</generator>
        <lastBuildDate>Fri, 25 Sep 2020 16:27:57 GMT</lastBuildDate>
        <atom:link href="http://gholk.github.io/feed/wcc723.rss" rel="self" type="application/rss+xml"/>
        <pubDate>Sat, 20 Oct 2018 00:00:00 GMT</pubDate>
        <language><![CDATA[zh-TW]]></language>
        <managingEditor><![CDATA[卡斯伯 casper wcc723]]></managingEditor>
        <webMaster><![CDATA[gholk]]></webMaster>
        <docs>http://gholk.github.io/feed/</docs>
        <ttl>1440</ttl>
        <category><![CDATA[front-end]]></category>
        <category><![CDATA[javascript]]></category>
        <category><![CDATA[css]]></category>
        <category><![CDATA[html]]></category>
        <item>
            <title><![CDATA[
        Chrome Console 中的 undefined 到底是哪來的？
        ]]></title>
            <description><![CDATA[
            教學的過程中，有許多學員會盡可能的搞懂程式碼運行過程中的各種結果，其中一個比較特別的案例就是想搞懂為什麼 Chrome Console 下方的 <· 會回傳 undefined。
範例程式碼：1var a = 1
本篇屬於不知道也不會怎樣的冷知識，但如果了解，你則會更清楚 JS 中的表達式觀念。
說明：本篇所介紹的環境都是在 Chrome Console 的直接輸入直接運行，並非透過原始碼運
        ]]></description>
            <link>https://wcc723.github.io/development/2020/09/25/chrome-console/</link>
            <guid isPermaLink="true">https://wcc723.github.io/development/2020/09/25/chrome-console/</guid>
            <category><![CDATA[
            development
            ]]></category>
            <pubDate>Thu, 24 Sep 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2Firon2020_10.jpg?alt=media&amp;token=3c49f0d8-38a0-4581-8d63-d6c286226ac1" length="0" type="image"/>
        </item>
        <item>
            <title><![CDATA[
        JavaScript 一級函式 （First Class Functions）
        ]]></title>
            <description><![CDATA[
            本篇重點是要介紹參數與函式的關係（尤其是常令人搞混的 callback function），但這個觀念又會扯到另一個常見的專有名詞（一級函式），因此在本篇就統一介紹。
一級函式一級函式並非是 JavaScript 專有的特性，只要該語言的「函式可被視為與其它變數一樣時」，就可以稱為該語言有一級函式的特性。

functions in that language are treated like a
        ]]></description>
            <link>https://wcc723.github.io/development/2020/09/24/first-class-function/</link>
            <guid isPermaLink="true">https://wcc723.github.io/development/2020/09/24/first-class-function/</guid>
            <category><![CDATA[
            development
            ]]></category>
            <pubDate>Wed, 23 Sep 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2Firon2020_09.jpg?alt=media&amp;token=354cf855-6cf6-4f73-82ce-65297eed1b40" length="0" type="image"/>
        </item>
        <item>
            <title><![CDATA[
        JS 記憶體釋放機制及驗證
        ]]></title>
            <description><![CDATA[
            作用域JavaScript 的變數有作用域的範圍，意思是指「宣告的變數有作用的區域限制」，如果超出了作用域則變數無法再被取得，這樣的做法優點為：

可以避免所有變數轉為全域變數
有效限制變數的作用區域

而變數作用域也會依據宣告的方式不同，產生不同的作用域：

未宣告：全域變數
var 宣告：作用域在 函式 中
let、const 宣告：作用域在 {} 中

var 宣告的變數
        ]]></description>
            <link>https://wcc723.github.io/development/2020/09/23/js-object/</link>
            <guid isPermaLink="true">https://wcc723.github.io/development/2020/09/23/js-object/</guid>
            <category><![CDATA[
            development
            ]]></category>
            <pubDate>Tue, 22 Sep 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2Firon2020_08.jpg?alt=media&amp;token=5559f38a-09aa-4a79-a232-ff9d3e3c9919" length="0" type="image"/>
        </item>
        <item>
            <title><![CDATA[
        呼叫函式時，到底有多少個參數 / 變數可供使用？
        ]]></title>
            <description><![CDATA[
            建立一個函式並呼叫時我們可以傳入一些參數，或者在這個參數中引用全域的變數，不過一個被呼叫的函式中究竟有多少可取用的變數或參數呢？
函式中的可用變數本篇會著重在參數的介紹，但一個函式中到底有哪些參數及變數呢？
以下透過一段範例程式碼來檢驗呼叫函式會有哪些變數 / 參數，在此可以透過「無痕模式」直接運行此段程式碼（無痕模式較能避免瀏覽器插件影響運行）。

注意：此段是針對傳統函式的說明，箭頭函式的運行
        ]]></description>
            <link>https://wcc723.github.io/development/2020/09/22/js-function/</link>
            <guid isPermaLink="true">https://wcc723.github.io/development/2020/09/22/js-function/</guid>
            <category><![CDATA[
            development
            ]]></category>
            <pubDate>Mon, 21 Sep 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2Firon2020_07.jpg?alt=media&amp;token=d6da2623-6897-4016-bb83-4a85638c9df3" length="0" type="image"/>
        </item>
        <item>
            <title><![CDATA[
        讓我們一起到達終點！超過 60% 完課率的直播課程 - JavaScript 作品實戰直播班
        ]]></title>
            <description><![CDATA[
            2020 年 9 月 20 日是 「JavaScript 作品實戰直播班」開班滿三個月的時間，也同時是本課程最後一天的繳交期限，同學們在家中努力趕工最終作品，而我在電腦前準備這份心得。
昨天，還收到學員的感謝訊息，提到透過這次的直播班的作品以及履歷健檢服務順利找到工作，我也訝異有同學這麼早就能順利求職，畢竟直播班還未正式結束，許多同學還在家中趕作業啊～
這次的直播班經歷不少波折，洧杰提到：「第一次
        ]]></description>
            <link>https://wcc723.github.io/development/2020/09/22/javascript-training-1st/</link>
            <guid isPermaLink="true">https://wcc723.github.io/development/2020/09/22/javascript-training-1st/</guid>
            <category><![CDATA[
            development
            ]]></category>
            <pubDate>Mon, 21 Sep 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2Fblog%E6%96%87.jpg?alt=media&amp;token=ad974590-7bee-4d50-84eb-0ed76c20800e" length="0" type="image"/>
        </item>
        <item>
            <title><![CDATA[
        JS 物件名詞解釋及常見觀念問題
        ]]></title>
            <description><![CDATA[
            接下來來到 JavaScript 另一個坑「物件」。
物件的定義方法差在哪？JavaScript 定義物件的方式主要有兩種形式：

var a = {}：{} 稱為物件實字，是相對簡短且易讀的建立方式。
var b = new Object();：使用 Object 建構函式產生物件。

這兩種建立方式就結果而言並無差別，但普遍來說會更推薦使用「物件實字」，
        ]]></description>
            <link>https://wcc723.github.io/development/2020/09/21/js-object/</link>
            <guid isPermaLink="true">https://wcc723.github.io/development/2020/09/21/js-object/</guid>
            <category><![CDATA[
            development
            ]]></category>
            <pubDate>Sun, 20 Sep 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2Firon2020_06.jpg?alt=media&amp;token=29accf08-edf3-4bb8-9bdf-86026366a3a2" length="0" type="image"/>
        </item>
        <item>
            <title><![CDATA[
        JS 加不加分號差在哪？
        ]]></title>
            <description><![CDATA[
            這個議題許多論壇、文件都有討論，在 ESlint 的規範中也可從加不加分號區分為兩大派系，至於加不加分號關鍵點則需要了解分號對於 JavaScript 的影響，開始之前可以先看看以下題目。
下方程式碼的運行預期為：

宣告 a 的值為 1
執行立即函式
於 console 中呈現 2

請問這段程式碼運行是否正確？1234var a = 1(function() {  console.l
        ]]></description>
            <link>https://wcc723.github.io/development/2020/09/20/js-semi/</link>
            <guid isPermaLink="true">https://wcc723.github.io/development/2020/09/20/js-semi/</guid>
            <category><![CDATA[
            development
            ]]></category>
            <pubDate>Sat, 19 Sep 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2Firon2020_05.jpg?alt=media&amp;token=a7055b63-fea5-4c67-a4b8-e8c8e6c61447" length="0" type="image"/>
        </item>
        <item>
            <title><![CDATA[
        開發總是沒問題，上線老是各種錯
        ]]></title>
            <description><![CDATA[
            不果是新手或老手都可能遇過這樣的狀況，程式碼在測試時運作上看起來都很正常，雖然有一些些地方還不是很熟悉，不過打從心裡認定它是正確的，但麻煩卻上線後才發現出錯，仔細檢查也看不出任何問題，殊不知是表達式的觀念錯誤。
程式碼的問題千萬種，本篇就持續在「表達式的觀念」挑出常見的問題，看看是否大家有遇到類似的狀況勒。
連續賦值這麼屌，為何文件都說這不好連續賦值（chain variable assignme
        ]]></description>
            <link>https://wcc723.github.io/development/2020/09/19/js-expression-3/</link>
            <guid isPermaLink="true">https://wcc723.github.io/development/2020/09/19/js-expression-3/</guid>
            <category><![CDATA[
            development
            ]]></category>
            <pubDate>Fri, 18 Sep 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2Firon2020_04.jpg?alt=media&amp;token=69f67bbb-c006-48cd-a2a2-b2f27424b280" length="0" type="image"/>
        </item>
        <item>
            <title><![CDATA[
        JavaScript 利用表達式優化你的程式碼
        ]]></title>
            <description><![CDATA[
            上一節介紹了表達式的基本概念「回傳結果」，那麼接下來你一定會想了解有哪些地方可以用到表達式，本篇就列出 JS 語法與常見框架的表達式運用，熟悉以後將會大幅增加 JS 語法的變化性。
運算子運算子依據運算元數量，可分為一元、二元甚至是三元運算子，而運算元本身也是屬於表達式，以我們常見的 === 來說就屬於二元運算子。
1運算元1 運算子 運算元2
此範例中的前後 1 皆是運算元，運算元本身也是屬於表
        ]]></description>
            <link>https://wcc723.github.io/development/2020/09/18/js-expression-2/</link>
            <guid isPermaLink="true">https://wcc723.github.io/development/2020/09/18/js-expression-2/</guid>
            <category><![CDATA[
            development
            ]]></category>
            <pubDate>Thu, 17 Sep 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2Firon2020_03.jpg?alt=media&amp;token=bccf04b2-d14b-4578-89dc-200f838a40cd" length="0" type="image"/>
        </item>
        <item>
            <title><![CDATA[
        JavaScript 表達式觀念及運用 - JS Expression
        ]]></title>
            <description><![CDATA[
            JavaScript 分為兩大的語句類型，就像是我們日常語言中的動詞、名詞、連接詞等概念，但在 JS 中僅分為兩大類型，分別為「陳述式」及「表達式」，其中表達式更為重要，如果能夠熟練表達式更能解決許多開發上的問題，也更能活用各種語法。

JavaScript 中的表達式原文為 「Expression」，翻譯上常見的有表達式、表示式、運算式等等。

表達式與陳述式的差異表達式及陳述式在各文件上都有概
        ]]></description>
            <link>https://wcc723.github.io/development/2020/09/17/js-expression/</link>
            <guid isPermaLink="true">https://wcc723.github.io/development/2020/09/17/js-expression/</guid>
            <category><![CDATA[
            development
            ]]></category>
            <pubDate>Wed, 16 Sep 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2Firon2020_02.jpg?alt=media&amp;token=a167272b-0a88-4b75-b2a5-73193b8e8b23" length="0" type="image"/>
        </item>
    </channel>
</rss>