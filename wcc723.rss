<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[卡斯伯 Blog - 前端，沒有極限]]></title>
        <description><![CDATA[前端工程師，有關 CSS、javascript]]></description>
        <link>http://wcc723.github.io/</link>
        <image>
            <url>http://wcc723.github.io/images/casper_blog.svg</url>
            <title>卡斯伯 Blog - 前端，沒有極限</title>
            <link>http://wcc723.github.io/</link>
        </image>
        <generator>anafeed: power by npm/RSS, npm/JSDOM, node.js</generator>
        <lastBuildDate>Tue, 22 Sep 2020 03:27:51 GMT</lastBuildDate>
        <atom:link href="http://gholk.github.io/feed/wcc723.rss" rel="self" type="application/rss+xml"/>
        <pubDate>Sat, 20 Oct 2018 00:00:00 GMT</pubDate>
        <language><![CDATA[zh-TW]]></language>
        <managingEditor><![CDATA[卡斯伯 casper wcc723]]></managingEditor>
        <webMaster><![CDATA[gholk]]></webMaster>
        <docs>http://gholk.github.io/feed/</docs>
        <ttl>1440</ttl>
        <category><![CDATA[front-end]]></category>
        <category><![CDATA[javascript]]></category>
        <category><![CDATA[css]]></category>
        <category><![CDATA[html]]></category>
        <item>
            <title><![CDATA[
        JS 物件名詞解釋及常見觀念問題
        ]]></title>
            <description><![CDATA[
            接下來來到 JavaScript 另一個坑「物件」。
物件的定義方法差在哪？JavaScript 定義物件的方式主要有兩種形式：

var a = {}：{} 稱為物件實字，是相對簡短且易讀的建立方式。
var b = new Object();：使用 Object 建構函式產生物件。

這兩種建立方式就結果而言並無差別，但普遍來說會更推薦使用「物件實字」，
        ]]></description>
            <link>https://wcc723.github.io/development/2020/09/21/js-object/</link>
            <guid isPermaLink="true">https://wcc723.github.io/development/2020/09/21/js-object/</guid>
            <category><![CDATA[
            development
            ]]></category>
            <pubDate>Sun, 20 Sep 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2Firon2020_06.jpg?alt=media&amp;token=29accf08-edf3-4bb8-9bdf-86026366a3a2" length="0" type="image"/>
        </item>
        <item>
            <title><![CDATA[
        JS 加不加分號差在哪？
        ]]></title>
            <description><![CDATA[
            這個議題許多論壇、文件都有討論，在 ESlint 的規範中也可從加不加分號區分為兩大派系，至於加不加分號關鍵點則需要了解分號對於 JavaScript 的影響，開始之前可以先看看以下題目。
下方程式碼的運行預期為：

宣告 a 的值為 1
執行立即函式
於 console 中呈現 2

請問這段程式碼運行是否正確？1234var a = 1(function() {  console.l
        ]]></description>
            <link>https://wcc723.github.io/development/2020/09/20/js-semi/</link>
            <guid isPermaLink="true">https://wcc723.github.io/development/2020/09/20/js-semi/</guid>
            <category><![CDATA[
            development
            ]]></category>
            <pubDate>Sat, 19 Sep 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2Firon2020_05.jpg?alt=media&amp;token=a7055b63-fea5-4c67-a4b8-e8c8e6c61447" length="0" type="image"/>
        </item>
        <item>
            <title><![CDATA[
        開發總是沒問題，上線老是各種錯
        ]]></title>
            <description><![CDATA[
            不果是新手或老手都可能遇過這樣的狀況，程式碼在測試時運作上看起來都很正常，雖然有一些些地方還不是很熟悉，不過打從心裡認定它是正確的，但麻煩卻上線後才發現出錯，仔細檢查也看不出任何問題，殊不知是表達式的觀念錯誤。
程式碼的問題千萬種，本篇就持續在「表達式的觀念」挑出常見的問題，看看是否大家有遇到類似的狀況勒。
連續賦值這麼屌，為何文件都說這不好連續賦值（chain variable assignme
        ]]></description>
            <link>https://wcc723.github.io/development/2020/09/19/js-expression-3/</link>
            <guid isPermaLink="true">https://wcc723.github.io/development/2020/09/19/js-expression-3/</guid>
            <category><![CDATA[
            development
            ]]></category>
            <pubDate>Fri, 18 Sep 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2Firon2020_04.jpg?alt=media&amp;token=69f67bbb-c006-48cd-a2a2-b2f27424b280" length="0" type="image"/>
        </item>
        <item>
            <title><![CDATA[
        JavaScript 利用表達式優化你的程式碼
        ]]></title>
            <description><![CDATA[
            上一節介紹了表達式的基本概念「回傳結果」，那麼接下來你一定會想了解有哪些地方可以用到表達式，本篇就列出 JS 語法與常見框架的表達式運用，熟悉以後將會大幅增加 JS 語法的變化性。
運算子運算子依據運算元數量，可分為一元、二元甚至是三元運算子，而運算元本身也是屬於表達式，以我們常見的 === 來說就屬於二元運算子。
1運算元1 運算子 運算元2
此範例中的前後 1 皆是運算元，運算元本身也是屬於表
        ]]></description>
            <link>https://wcc723.github.io/development/2020/09/18/js-expression-2/</link>
            <guid isPermaLink="true">https://wcc723.github.io/development/2020/09/18/js-expression-2/</guid>
            <category><![CDATA[
            development
            ]]></category>
            <pubDate>Thu, 17 Sep 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2Firon2020_03.jpg?alt=media&amp;token=bccf04b2-d14b-4578-89dc-200f838a40cd" length="0" type="image"/>
        </item>
        <item>
            <title><![CDATA[
        JavaScript 表達式觀念及運用 - JS Expression
        ]]></title>
            <description><![CDATA[
            JavaScript 分為兩大的語句類型，就像是我們日常語言中的動詞、名詞、連接詞等概念，但在 JS 中僅分為兩大類型，分別為「陳述式」及「表達式」，其中表達式更為重要，如果能夠熟練表達式更能解決許多開發上的問題，也更能活用各種語法。

JavaScript 中的表達式原文為 「Expression」，翻譯上常見的有表達式、表示式、運算式等等。

表達式與陳述式的差異表達式及陳述式在各文件上都有概
        ]]></description>
            <link>https://wcc723.github.io/development/2020/09/17/js-expression/</link>
            <guid isPermaLink="true">https://wcc723.github.io/development/2020/09/17/js-expression/</guid>
            <category><![CDATA[
            development
            ]]></category>
            <pubDate>Wed, 16 Sep 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2Firon2020_02.jpg?alt=media&amp;token=a167272b-0a88-4b75-b2a5-73193b8e8b23" length="0" type="image"/>
        </item>
        <item>
            <title><![CDATA[
        JavaScript 開發中常見錯誤解決辦法
        ]]></title>
            <description><![CDATA[
            身為一個開發者，當然都會了解經驗越多，除錯上會更為容易，這種事情你我都清楚。但對於一個新手來就是缺少錯誤上的經驗，所以當遇到紅字時會不知如何著手。
這一系列的文章是專門給剛入門新手的前端開發者觀看的，盡可能用白話的方式，並且提供簡單的範例程式碼以供驗證。
Chrome 開發者工具的常見錯誤排解Chrome 開發者工具的 Console 相當好用，最常使用的不外乎是透過console.log 呈現出
        ]]></description>
            <link>https://wcc723.github.io/development/2020/09/16/chrome-js-alert/</link>
            <guid isPermaLink="true">https://wcc723.github.io/development/2020/09/16/chrome-js-alert/</guid>
            <category><![CDATA[
            development
            ]]></category>
            <pubDate>Tue, 15 Sep 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2Firon2020_01.jpg?alt=media&amp;token=3f3582ae-2f2f-44e2-8f8f-d1ca33a3a698" length="0" type="image"/>
        </item>
        <item>
            <title><![CDATA[
        完全解析 JavaScript import、export
        ]]></title>
            <description><![CDATA[
            import、export 是 JavaScript 模組管理的方法，可以將每個檔案視為一個獨立的模組匯出，並在另一個檔案匯入使用。透過此方式每個檔案更能專注在特定的功能上，且能避免單一檔案過度龐大。
相容性介紹此方法前，還是要了解一下相容性，目前來說許多主流瀏覽器都是可以運行的，但是寫法需要稍做調整，而 Node.js 則是要到 13.2 才可直接運行模組化。

瀏覽器中運行如果要在瀏覽器運行模
        ]]></description>
            <link>https://wcc723.github.io/development/2020/03/25/import-export/</link>
            <guid isPermaLink="true">https://wcc723.github.io/development/2020/03/25/import-export/</guid>
            <category><![CDATA[
            development
            ]]></category>
            <pubDate>Tue, 24 Mar 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2F202003%2Fimg-import-export.png?alt=media&amp;token=b0833260-7033-4045-bd6d-4e74df3f6ad5" length="0" type="image"/>
        </item>
        <item>
            <title><![CDATA[
        開公司的流程及雷點分享
        ]]></title>
            <description><![CDATA[
            這次跟大家分享開公司上的一些心得，由於網路上可以找到許多開公司的流程，本篇會著重在心得的分享，當然我也並非專業的會計、法務，正確的流程建議可以詢問合作的會計。
會計開公司如果要省時間，找一個好會計是必要的，因為開公司在學校並非必修課程，大部分人都不會有開公司的經驗，雖然說是「開公司」但林林總總的項目非常多，除了公司設立外還有包含發票、營業稅、勞健保這些項目都是需要獨立申請，如果沒有一個人引導將會花
        ]]></description>
            <link>https://wcc723.github.io/business/2020/03/18/how-to-register-a-company/</link>
            <guid isPermaLink="true">https://wcc723.github.io/business/2020/03/18/how-to-register-a-company/</guid>
            <category><![CDATA[
            business
            ]]></category>
            <pubDate>Tue, 17 Mar 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2F202003%2Fimg-register-company.png?alt=media&amp;token=c128c4a8-c657-4ffe-a872-03238d3c793f" length="0" type="image"/>
        </item>
        <item>
            <title><![CDATA[
        Flex 空間計算規則
        ]]></title>
            <description><![CDATA[
            此篇是延續先前的 Flex 的文章（圖解：CSS Flex 屬性一點也不難），本篇則是著重在 flex 中的 flex-grow、flex-shrink 和 flex-basis 這三個屬性，如果對於 Flex 基礎尚不熟悉的可先閱讀前一篇文章。
首先，回顧下先前的三個屬性介紹：
flex 是縮寫，裡面依序包含三個屬性 flex-grow、flex-shrink 和 flex-basis。

fl
        ]]></description>
            <link>https://wcc723.github.io/css/2020/03/08/flex-size/</link>
            <guid isPermaLink="true">https://wcc723.github.io/css/2020/03/08/flex-size/</guid>
            <category><![CDATA[
            css
            ]]></category>
            <pubDate>Sat, 07 Mar 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2F202003%2Fflex-cover.png?alt=media&amp;token=ce7a29ec-255b-40b3-a724-33dd4407ee2c" length="0" type="image"/>
        </item>
        <item>
            <title><![CDATA[
        爬蟲、E2E 測試兩相宜的好工具 - Puppeteer
        ]]></title>
            <description><![CDATA[
            Puppeteer 是 Node.js 的函式庫，它提供各種 API 來控制 Chrome 或 Chromium 瀏覽器，而此瀏覽器也是目前主流的瀏覽器，用來做為測試、爬蟲都相當合適，並且所提供的 API 語法淺顯易懂，只要具有 jQuery 的使用經驗就可以很快速地上手。
安裝官方提供兩個版本，一個包含 Chromium，另一個則無，如果有安裝 Chrome 的情況下可以不需要另外下載 Chro
        ]]></description>
            <link>https://wcc723.github.io/development/2020/03/01/puppeteer/</link>
            <guid isPermaLink="true">https://wcc723.github.io/development/2020/03/01/puppeteer/</guid>
            <category><![CDATA[
            development
            ]]></category>
            <pubDate>Sat, 29 Feb 2020 16:00:00 GMT</pubDate>
            <enclosure url="https://firebasestorage.googleapis.com/v0/b/casper-de5d5.appspot.com/o/images%2Fblog%2F202003%2Fimg-puppeteer.png?alt=media&amp;token=42d44728-9eaf-42b3-8be2-fd62d0795dd0" length="0" type="image"/>
        </item>
    </channel>
</rss>